syntax = "proto3";

package rolodex;
option java_package = "rolodex";

service Rolodex {
  // Add a new client account
  rpc AddClient(NewClientRequest) returns (NewClientResponse);

  // Authenticate a client
  rpc Authenticate(AuthRequest) returns (AuthResponse);

  // Get public client model
  rpc GetClient(GetClientRequest) returns (GetClientResponse);

  // Update a client's account details
  rpc UpdateClient(UpdateClientRequest) returns (UpdateClientResponse);

  // Update a client's password hash
  rpc UpdateClientPassword(UpdateClientPasswordRequest)
      returns (UpdateClientPasswordResponse);

  // Update a client's contact email address
  rpc UpdateClientEmail(UpdateClientEmailRequest)
      returns (UpdateClientEmailResponse);

  // Update a client's contact phone number
  rpc UpdateClientPhoneNumber(UpdateClientPhoneNumberRequest)
      returns (UpdateClientPhoneNumberResponse);

  // Health check endpoint
  rpc Check(HealthCheckRequest) returns (HealthCheckResponse);
}

enum Result {
  SUCCESS = 0;
  FAILURE = 1;
  UNAUTHORIZED = 2;
}

message UpdateClientRequest {
  Client client = 1;
  Location location = 2;
}
message UpdateClientResponse { Result result = 1; }

message UpdateClientPasswordRequest {
  string client_id = 1;
  string password_hash = 2;
  Location location = 3;
}
message UpdateClientPasswordResponse { Result result = 1; }

message UpdateClientEmailRequest {
  string client_id = 1;
  string email = 2;
  Location location = 3;
}
message UpdateClientEmailResponse { Result result = 1; }

message UpdateClientPhoneNumberRequest {
  string client_id = 1;
  PhoneNumber phone_number = 2;
  Location location = 3;
}
message UpdateClientPhoneNumberResponse { Result result = 1; }

// The public representation of a client
message Client {
  string client_id = 1;
  string full_name = 2;
  string public_key = 3;
}

// For creating new client accounts only
message NewClientRequest {
  string full_name = 1;
  string password_hash = 2;
  string email = 3;
  PhoneNumber phone_number = 4;
  string public_key = 5;
  Location location = 6;
}
message NewClientResponse { string client_id = 1; }

// Authenticate a client
message AuthRequest {
  string client_id = 1;
  string password_hash = 2;
}
message AuthResponse { string client_id = 1; }

// Fetch public client info
message GetClientRequest {
  string calling_client_id = 1;
  string client_id = 2;
}
message GetClientResponse { Client client = 1; }

message PhoneNumber {
  string country_code = 1; // Two-letter country (CA, US, UK, ...)
  string national_number = 2;
}

// A message representing IP-based geolocation for the API request
message Location {
  string ip_address = 1;
  string region = 2;
  string region_subdivision = 3;
  string city = 4;
}

message HealthCheckRequest { string service = 1; }

message HealthCheckResponse {
  enum ServingStatus {
    UNKNOWN = 0;
    SERVING = 1;
    NOT_SERVING = 2;
  }
  ServingStatus status = 1;
}
